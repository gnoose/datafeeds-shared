import json
from datetime import date
from unittest import TestCase

from datafeeds.scrapers.smart_meter_texas import (
    SmartMeterTexasScraper as Smt,
    ApiException,
)

FIXTURE_01 = r"""
{
 "trans_id":"gridium123",
 "esiid":"10443720002305039",
 "energyData": [
 {"DT":"01\/01\/2020","RevTS":"01\/02\/2020 07:52:07","RT":"C","RD":"3.072-A,3.504-A,3.408-A,3.384-A,3.24-A,3.336-A,3.336-A,3.216-A,,,,,3.264-A,3.264-A,3.12-A,3.216-A,3.264-A,3.144-A,3.216-A,3.12-A,3.144-A,3.912-A,3.408-A,3.48-A,4.344-A,4.392-A,4.32-A,4.416-A,4.416-A,4.32-A,4.368-A,4.32-A,4.344-A,4.44-A,4.584-A,4.488-A,3.288-A,3.576-A,3.168-A,3.216-A,3.288-A,3.24-A,3.216-A,3.072-A,3.072-A,3.336-A,3.12-A,3.336-A,3.168-A,3.096-A,3.264-A,3.168-A,3.336-A,3.216-A,3.504-A,3.12-A,3.216-A,3.312-A,3.288-A,3.192-A,3.216-A,3.168-A,3.096-A,3.24-A,3.048-A,2.952-A,3.192-A,3.12-A,3.192-A,3.048-A,3.24-A,3.384-A,4.32-A,4.176-A,4.296-A,4.296-A,4.248-A,4.08-A,4.392-A,4.296-A,4.752-A,4.296-A,4.392-A,4.32-A,4.272-A,4.368-A,4.344-A,4.272-A,4.368-A,4.392-A,4.512-A,4.368-A,4.272-A,4.32-A,4.56-A,4.344-A,3.144-A,3.12-A,2.976-A,2.976-A"},
 {"DT":"01\/02\/2020","RevTS":"01\/03\/2020 07:48:14","RT":"C","RD":"3.048-A,3.048-A,3.312-A,3.432-A,3.24-A,3-A,3.12-A,3.216-A,,,,,3.048-A,2.976-A,2.952-A,3.168-A,3.336-A,3.024-A,3.048-A,3.072-A,3.024-A,2.976-A,3.12-A,3.144-A,4.008-A,4.224-A,4.464-A,4.128-A,4.128-A,4.056-A,4.296-A,4.104-A,4.104-A,4.2-A,4.272-A,4.296-A,3-A,3.144-A,2.976-A,2.904-A,3.024-A,2.952-A,3-A,3.264-A,3.024-A,3.12-A,3.048-A,3.312-A,3.36-A,3.264-A,3.384-A,3.168-A,3.312-A,3.192-A,3.456-A,3.192-A,3.192-A,3.24-A,3.432-A,3.48-A,3.144-A,3.12-A,3.072-A,3.096-A,3.168-A,2.952-A,3.24-A,3.144-A,3.456-A,3.264-A,3-A,2.808-A,3.72-A,3.864-A,3.84-A,3.84-A,3.816-A,3.84-A,3.912-A,3.816-A,3.816-A,3.84-A,4.008-A,3.96-A,4.2-A,4.104-A,3.888-A,3.864-A,3.84-A,3.936-A,3.864-A,3.936-A,3.84-A,4.08-A,4.176-A,3.888-A,2.904-A,3-A,2.856-A,2.832-A"},
 {"DT":"01\/03\/2020","RevTS":"01\/04\/2020 07:46:27","RT":"C","RD":"3.432-A,3.144-A,3.048-A,2.832-A,2.88-A,2.928-A,3.072-A,3.048-A,,,,,2.904-A,2.976-A,3-A,3.168-A,3-A,3.024-A,2.976-A,2.976-A,3.048-A,2.856-A,3.144-A,3.144-A,3.96-A,4.152-A,4.104-A,4.152-A,4.056-A,4.368-A,4.512-A,4.2-A,4.176-A,4.128-A,4.368-A,4.176-A,3.12-A,3.24-A,3.264-A,3.024-A,2.928-A,3.192-A,3-A,2.808-A,2.88-A,2.976-A,2.952-A,2.616-A,2.352-A,2.4-A,2.328-A,2.352-A,2.136-A,2.352-A,2.448-A,2.112-A,2.328-A,2.232-A,2.664-A,2.52-A,2.232-A,2.376-A,2.184-A,2.616-A,2.448-A,2.16-A,2.28-A,2.232-A,2.184-A,2.424-A,2.472-A,2.304-A,3.552-A,3.72-A,3.36-A,3.552-A,3.36-A,3.456-A,3.456-A,3.528-A,3.336-A,3.576-A,3.672-A,3.792-A,3.552-A,3.648-A,3.552-A,3.528-A,3.504-A,3.576-A,3.672-A,3.528-A,3.6-A,3.792-A,3.744-A,3.84-A,2.448-A,2.64-A,2.52-A,2.688-A"}
 ]
}
"""  # noqa: E501

FIXTURE_02 = r"""
{
 "trans_id":"gridium123",
 "esiid":"10443720002305039",
 "energyData": [
 {"DT":"01\/01\/2020","RevTS":"01\/02\/2020 07:52:07","RT":"C","RD":"3.072-A,3.504-A,3.408-A,3.384-A,3.24-A,3.336-A,3.336-A,3.216-A,,,,,3.264-A,3.264-A,3.12-A,3.216-A,3.264-A,3.144-A,3.216-A,3.12-A,3.144-A,3.912-A,3.408-A,3.48-A,4.344-A,4.392-A,4.32-A,4.416-A,4.416-A,4.32-A,4.368-A,4.32-A,4.344-A,4.44-A,4.584-A,4.488-A,3.288-A,3.576-A,3.168-A,3.216-A,3.288-A,3.24-A,3.216-A,3.072-A,3.072-A,3.336-A,3.12-A,3.336-A,3.168-A,3.096-A,3.264-A,3.168-A,3.336-A,3.216-A,3.504-A,3.12-A,3.216-A,3.312-A,3.288-A,3.192-A,3.216-A,3.168-A,3.096-A,3.24-A,3.048-A,2.952-A,3.192-A,3.12-A,3.192-A,3.048-A,3.24-A,3.384-A,4.32-A,4.176-A,4.296-A,4.296-A,4.248-A,4.08-A,4.392-A,4.296-A,4.752-A,4.296-A,4.392-A,4.32-A,4.272-A,4.368-A,4.344-A,4.272-A,4.368-A,4.392-A,4.512-A,4.368-A,4.272-A,4.32-A,4.56-A,4.344-A,3.144-A,3.12-A,2.976-A,2.976-A"},
 {"DT":"/02\/2020","RevTS":"01\/03\/2020 07:48:14","RT":"C","RD":"3.048-A,3.048-A,3.312-A,3.432-A,3.24-A,3-A,3.12-A,3.216-A,,,,,3.048-A,2.976-A,2.952-A,3.168-A,3.336-A,3.024-A,3.048-A,3.072-A,3.024-A,2.976-A,3.12-A,3.144-A,4.008-A,4.224-A,4.464-A,4.128-A,4.128-A,4.056-A,4.296-A,4.104-A,4.104-A,4.2-A,4.272-A,4.296-A,3-A,3.144-A,2.976-A,2.904-A,3.024-A,2.952-A,3-A,3.264-A,3.024-A,3.12-A,3.048-A,3.312-A,3.36-A,3.264-A,3.384-A,3.168-A,3.312-A,3.192-A,3.456-A,3.192-A,3.192-A,3.24-A,3.432-A,3.48-A,3.144-A,3.12-A,3.072-A,3.096-A,3.168-A,2.952-A,3.24-A,3.144-A,3.456-A,3.264-A,3-A,2.808-A,3.72-A,3.864-A,3.84-A,3.84-A,3.816-A,3.84-A,3.912-A,3.816-A,3.816-A,3.84-A,4.008-A,3.96-A,4.2-A,4.104-A,3.888-A,3.864-A,3.84-A,3.936-A,3.864-A,3.936-A,3.84-A,4.08-A,4.176-A,3.888-A,2.904-A,3-A,2.856-A,2.832-A"}
 ]
}
"""  # noqa: E501

FIXTURE_03 = r"""
{
 "trans_id":"gridium123",
 "esiid":"10443720002305039",
 "energyData": [
 {"DT":"01\/01\/2020","RevTS":"01\/02\/2020 07:52:07","RT":"C","RD":"3.072-A,3.504-A,3.408-A,3.384-A,"}
 ]
}
"""  # noqa: E501

DAY_01 = [
    3.072,
    3.504,
    3.408,
    3.384,
    3.24,
    3.336,
    3.336,
    3.216,
    3.264,
    3.264,
    3.12,
    3.216,
    3.264,
    3.144,
    3.216,
    3.12,
    3.144,
    3.912,
    3.408,
    3.48,
    4.344,
    4.392,
    4.32,
    4.416,
    4.416,
    4.32,
    4.368,
    4.32,
    4.344,
    4.44,
    4.584,
    4.488,
    3.288,
    3.576,
    3.168,
    3.216,
    3.288,
    3.24,
    3.216,
    3.072,
    3.072,
    3.336,
    3.12,
    3.336,
    3.168,
    3.096,
    3.264,
    3.168,
    3.336,
    3.216,
    3.504,
    3.12,
    3.216,
    3.312,
    3.288,
    3.192,
    3.216,
    3.168,
    3.096,
    3.24,
    3.048,
    2.952,
    3.192,
    3.12,
    3.192,
    3.048,
    3.24,
    3.384,
    4.32,
    4.176,
    4.296,
    4.296,
    4.248,
    4.08,
    4.392,
    4.296,
    4.752,
    4.296,
    4.392,
    4.32,
    4.272,
    4.368,
    4.344,
    4.272,
    4.368,
    4.392,
    4.512,
    4.368,
    4.272,
    4.32,
    4.56,
    4.344,
    3.144,
    3.12,
    2.976,
    2.976,
]

DAY_02 = [
    3.048,
    3.048,
    3.312,
    3.432,
    3.24,
    3,
    3.12,
    3.216,
    3.048,
    2.976,
    2.952,
    3.168,
    3.336,
    3.024,
    3.048,
    3.072,
    3.024,
    2.976,
    3.12,
    3.144,
    4.008,
    4.224,
    4.464,
    4.128,
    4.128,
    4.056,
    4.296,
    4.104,
    4.104,
    4.2,
    4.272,
    4.296,
    3,
    3.144,
    2.976,
    2.904,
    3.024,
    2.952,
    3,
    3.264,
    3.024,
    3.12,
    3.048,
    3.312,
    3.36,
    3.264,
    3.384,
    3.168,
    3.312,
    3.192,
    3.456,
    3.192,
    3.192,
    3.24,
    3.432,
    3.48,
    3.144,
    3.12,
    3.072,
    3.096,
    3.168,
    2.952,
    3.24,
    3.144,
    3.456,
    3.264,
    3,
    2.808,
    3.72,
    3.864,
    3.84,
    3.84,
    3.816,
    3.84,
    3.912,
    3.816,
    3.816,
    3.84,
    4.008,
    3.96,
    4.2,
    4.104,
    3.888,
    3.864,
    3.84,
    3.936,
    3.864,
    3.936,
    3.84,
    4.08,
    4.176,
    3.888,
    2.904,
    3,
    2.856,
    2.832,
]

DAY_03 = [
    3.432,
    3.144,
    3.048,
    2.832,
    2.88,
    2.928,
    3.072,
    3.048,
    2.904,
    2.976,
    3,
    3.168,
    3,
    3.024,
    2.976,
    2.976,
    3.048,
    2.856,
    3.144,
    3.144,
    3.96,
    4.152,
    4.104,
    4.152,
    4.056,
    4.368,
    4.512,
    4.2,
    4.176,
    4.128,
    4.368,
    4.176,
    3.12,
    3.24,
    3.264,
    3.024,
    2.928,
    3.192,
    3,
    2.808,
    2.88,
    2.976,
    2.952,
    2.616,
    2.352,
    2.4,
    2.328,
    2.352,
    2.136,
    2.352,
    2.448,
    2.112,
    2.328,
    2.232,
    2.664,
    2.52,
    2.232,
    2.376,
    2.184,
    2.616,
    2.448,
    2.16,
    2.28,
    2.232,
    2.184,
    2.424,
    2.472,
    2.304,
    3.552,
    3.72,
    3.36,
    3.552,
    3.36,
    3.456,
    3.456,
    3.528,
    3.336,
    3.576,
    3.672,
    3.792,
    3.552,
    3.648,
    3.552,
    3.528,
    3.504,
    3.576,
    3.672,
    3.528,
    3.6,
    3.792,
    3.744,
    3.84,
    2.448,
    2.64,
    2.52,
    2.688,
]


class SmartMeterTexasParserTest(TestCase):
    def test_response_parsing_null_data(self):
        """The SMT response parser returns an empty dictionary given bad input data."""
        content = {}
        actual = Smt.parse(content)
        expected = {}
        self.assertEqual(expected, actual)

    def test_response_parsing(self):
        """The SMT response parser can process three days of standard interval data."""
        content = json.loads(FIXTURE_01)
        actual = Smt.parse(content)

        expected = {
            date(2020, 1, 1): DAY_01,
            date(2020, 1, 2): DAY_02,
            date(2020, 1, 3): DAY_03,
        }

        self.assertEqual(expected, actual)

    def test_response_parsing_bad_dates(self):
        """The SMT response parser drops dates it can't parse."""
        content = json.loads(FIXTURE_02)
        actual = Smt.parse(content)
        expected = {
            date(2020, 1, 1): DAY_01,
        }

        self.assertEqual(expected, actual)

    def test_response_parsing_bad_interval_data(self):
        """If SMT sends an unexpected number of readings, the parser raises an exception."""
        content = json.loads(FIXTURE_03)
        with self.assertRaises(ApiException):
            Smt.parse(content)
