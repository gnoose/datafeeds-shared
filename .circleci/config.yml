version: 2.1
orbs:
  slack: circleci/slack@3.4.2
jobs:
  test:
    docker:
      - image: circleci/python:3.8.5
        environment:
          DATAFEEDS_UNDER_TEST: True
      - image: mdillon/postgis@sha256:f006ac612da048c54e49d7b2abd2862295070edcdd7d28efb24bccf859a87466
    steps:
      - checkout
      - run: echo 127.0.0.1 pg | sudo tee -a /etc/hosts
      - run:
          name: Bind AWS dev credentials for private fixtures to environment variables.
          command: |
            echo 'export AWS_ACCESS_KEY_ID=${AWS_DEV_ACCESS_KEY_ID}' >> $BASH_ENV
            echo 'export AWS_SECRET_ACCESS_KEY=${AWS_DEV_SECRET_ACCESS_KEY}' >> $BASH_ENV
      - run: sudo chown -R circleci:circleci /usr/local/bin
      - run: sudo chown -R circleci:circleci /usr/local/lib/python3.8/site-packages
      - run:
          name: Setting up pipenv
          command: sudo pip install pipenv
      - run:
          name: Update pip to the latest.
          command: pip install -U pip
      - run:
          name: Installing dependencies
          command: pipenv install -r requirements.txt
      - run:
          name: Installing development dependencies
          command: pipenv install -r dev-requirements.txt
      - run:
          name: Running Black (code formatting)
          command: pipenv run black --check .
      - run:
          name: Running lint
          command: pipenv run flake8 datafeeds ops launch.py
      - run:
          name: Running static analysis
          command: pipenv run mypy --no-strict-optional datafeeds launch.py
      - run:
          name: Running tests
          command: pipenv run python -m unittest -v
      - run:
          name: Running smoke test on launch.py
          command: pipenv run python launch.py --help
      - run: exit 0
      - slack/status:
          fail_only: false
  containerize:
    docker:
      - image: circleci/python:3.8.5
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Skip containerize if not configured
          command: |
            if [[ -z $AWS_DEV_ECR_ACCOUNT_URL ]]; then
              circleci-agent step halt
            fi
      - run:
          name: Set DEPLOY_TAG if on master branch
          command: |
            if [[ $CIRCLE_BRANCH == 'master' ]]; then
              echo "on master branch"
              echo 'export DEPLOY_TAG="deployed"' >> $BASH_ENV
            else
              echo "on feature branch $CIRCLE_BRANCH"
            fi
            echo "DEPLOYED_TAG is: $DEPLOY_TAG"
      - checkout
      # CircleCI does not allow orbs to take custom environment variables
      # Only Prod is setup for CD.
      - run:
          name: Build and push docker image to dev ECR
          command: |
            TAG=$CIRCLE_SHA1
            docker build -t $AWS_DEV_ECR_ACCOUNT_URL/datafeeds:$TAG .
            pip install awscli --upgrade --user
            PATH=~/.local/bin:$PATH
            export AWS_ACCESS_KEY_ID=$AWS_DEV_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_DEV_SECRET_ACCESS_KEY
            eval $(aws ecr get-login --region $AWS_DEV_DEFAULT_REGION --no-include-email)
            docker push $AWS_DEV_ECR_ACCOUNT_URL/datafeeds:$TAG
      - run:
          name: Push docker image to prod ECR
          command: |
            TAG=$CIRCLE_SHA1
            docker tag $AWS_DEV_ECR_ACCOUNT_URL/datafeeds:$TAG $AWS_PROD_ECR_ACCOUNT_URL/datafeeds:$TAG
            PATH=~/.local/bin:$PATH
            export AWS_ACCESS_KEY_ID=$AWS_PROD_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_PROD_SECRET_ACCESS_KEY
            eval $(aws ecr get-login --region $AWS_PROD_DEFAULT_REGION --no-include-email)
            docker push $AWS_PROD_ECR_ACCOUNT_URL/datafeeds:$TAG
            if [[ ! -z $DEPLOY_TAG ]]; then
              echo "DEPLOY_TAG is not null and is set to $DEPLOY_TAG"
              docker tag $AWS_PROD_ECR_ACCOUNT_URL/datafeeds:$TAG $AWS_PROD_ECR_ACCOUNT_URL/datafeeds:$DEPLOY_TAG
              docker push $AWS_PROD_ECR_ACCOUNT_URL/datafeeds:$DEPLOY_TAG
            else
              echo "DEPLOY_TAG is unset."
            fi

workflows:
  build-and-deploy:
    jobs:
      - test
      - containerize:
          requires:
            - test
